".source.js":
  "Array.isArray":
    prefix: "isArray"
    body: """
    Array.isArray(${1:object})$0
    """
  "Array.from":
    prefix: "from"
    body: """
    Array.from(${1:arrayLike})$0
    """

  "forEach loop":
    prefix: "foreach"
    body: """
    ${1:array}.forEach(${2:(${3:item}) => {
    \t${0}
    \\}});
    """
  "forEach loop chain":
    prefix: ".foreach"
    body: """
    .forEach(${1:(${2:item}) => {
    \t${0}
    \\}});
    """

  "map":
    prefix: "map"
    body: """
    ${1:array}.map(${2:{(${3:item}) => {
    \t${0}
    \\}});
    """
  "map chain":
    prefix: ".map"
    body: """
    .map(${1:(${2:item}) => {
    \t${0}
    \\}});
    """
  "reduce":
    prefix: "reduce"
    body: """
    ${1:array}.reduce(${2:(${3:previous}, ${4:current}) => {
    \t${0}
    \\}}${5:, ${6:initial}});
    """
  "reduce chain":
    prefix: ".reduce"
    body: """
    .reduce(${2:(${3:previous}, ${4:current}) => {
    \t${0}
    \\}}${5:, ${6:initial}});
    """

  "filter":
    prefix: "filter"
    body: """
    ${1:array}.filter(${2:(${3:item}) => {
    \t${0}
    \\}});
    """
  "filter chain":
    prefix: ".filter"
    body: """
    .filter(${1:(${2:item}) => {
    \t${0}
    \\}});
    """
  "find":
    prefix: "find"
    body: """
    ${1:array}(${2:(${3:item}) => {
    \t${0}
    \\}});
    """
  "find chain":
    prefix: ".find"
    body: """
    .find(${1:(${2:item}) => {
    \t${0}
    \\}});
    """
  "some":
    prefix: "some"
    body: """
    ${1:array}.some(${2:(${3:item}) => {
    \t${0}
    \\}});
    """
  "some chain":
    prefix: ".some"
    body: """
    .some(${1:(${2:item}) => {
    \t${0}
    \\}});
    """
  "every":
    prefix: "every"
    body: """
    ${1:array}.every(${2:(${3:item}) => {
    \t${0}
    \\}});
    """
  "every chain":
    prefix: ".every"
    body: """
    .every(${1:(${2:item}) => {
    \t${0}
    \\}});
    """
  "indexOf":
    prefix: "indexOf"
    body: """
    ${1:array}.indexOf(${2:item}${3:, ${4:fromIndex}});
    """
  "indexOf chain":
    prefix: ".indexOf"
    body: """
    .indexOf(${1:item}${2:, ${3:fromIndex}});
    """
  "concat":
    prefix: "concat"
    body: """
    ${1:array}.concat(${2:array});
    """
  "concat chain":
    prefix: ".concat"
    body: """
    .concat(${1:array});
    """
  "join":
    prefix: "join"
    body: "${1:array}.join(${2:''})$0"
  "join chain":
    prefix: ".join"
    body: ".join(${1:''})$0"
