# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.platform-darwin':
  'cmd-|': "window:focus-next-pane",

'.platform-darwin atom-text-editor:not([mini])':
  'ctrl-left': 'editor:move-to-previous-subword-boundary'
  'ctrl-right': 'editor:move-to-next-subword-boundary'
  'ctrl-shift-left': 'editor:select-to-previous-subword-boundary'
  'ctrl-shift-right': 'editor:select-to-next-subword-boundary'
  'ctrl-W': 'emmet:wrap-with-abbreviation'

'atom-text-editor:not([mini]):not(.autocomplete-active)':
  'cmd-escape': 'autocomplete-plus:activate'

# Emmet!
'.platform-darwin atom-text-editor[data-grammar~="html"]:not([mini]),
 .platform-darwin atom-text-editor[data-grammar~="css"]:not([mini])':
  'cmd-e': 'emmet:expand-abbreviation'

'.platform-darwin atom-workspace':
  'cmd-shift-f': 'project-find:show-in-current-directory'
