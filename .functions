# ssh-upload
function ssh-upload() {
  KEY="$HOME/.ssh/id_dsa.pub"

  if [ ! -f ${KEY} ];then
    KEY="$HOME/.ssh/id_rsa.pub"
    echo "private key not found at ${KEY}"
    echo "* please create it with "ssh-keygen -t dsa" *"
    echo "* to login to the remote host without a password, don't give the key you create with ssh-keygen a password! *"
    return
  fi

  if [ -z $1 ];then
      echo "Please specify user@host.tld as the first switch to this script"
      return
  fi

  echo "Putting your key on $1... "

  KEYCODE=`cat $KEY`
  ssh -q $1 "mkdir ~/.ssh 2>/dev/null; chmod 700 ~/.ssh; echo "$KEYCODE" >> ~/.ssh/authorized_keys; chmod 644 ~/.ssh/authorized_keys"

  echo "Done!"
}

# Create a new directory and enter it
function mkd() {
        mkdir -p "$@" && cd "$@"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
        cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
        local tmpFile="${@%/}.tar"
        tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

        size=$(
                stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
                stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
        )

        local cmd=""
        if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
                # the .tar file is smaller than 50 MB and Zopfli is available; use it
                cmd="zopfli"
        else
                if hash pigz 2> /dev/null; then
                        cmd="pigz"
                else
                        cmd="gzip"
                fi
        fi

        echo "Compressing .tar using \`${cmd}\`â€¦"
        "${cmd}" -v "${tmpFile}" || return 1
        [ -f "${tmpFile}" ] && rm "${tmpFile}"
        echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
        if du -b /dev/null > /dev/null 2>&1; then
                local arg=-sbh
        else
                local arg=-sh
        fi
        if [[ -n "$@" ]]; then
                du $arg -- "$@"
        else
                du $arg .[^.]* *
        fi
}

# `e` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function e() {
        if [ $# -eq 0 ]; then
                $EDITOR_BIN .
        else
                $EDITOR_BIN "$@"
        fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
        if [ $# -eq 0 ]; then
                open .
        else
                open "$@"
        fi
}
